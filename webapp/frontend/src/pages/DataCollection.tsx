import React, { useState } from 'react';
import {
  Container,
  Typography,
  Paper,
  Box,
  TextField,
  Button,
  Select,
  MenuItem,
  FormControl,
  InputLabel,
  Alert,
  CircularProgress,
  LinearProgress,
  Accordion,
  AccordionSummary,
  AccordionDetails,
  Chip,
  Stepper,
  Step,
  StepLabel,
  List,
  ListItem,
  ListItemText,
  ListItemIcon
} from '@mui/material';
import {
  ExpandMore as ExpandMoreIcon,
  Search as SearchIcon,
  Download as DownloadIcon,
  CheckCircle as CheckCircleIcon,
  Error as ErrorIcon,
  Info as InfoIcon
} from '@mui/icons-material';
import { apiService } from '../services/api';

interface ScrapingRequest {
  rooms: string;
  city: string;
  build_state: string;
  property_type?: string;
}

interface ScrapingResponse {
  status: string;
  message: string;
  task_id?: string;
  total_scraped?: number;
  processing_status: string;
  files_created?: string[];
  data?: any; // Full pipeline response data
}

const DataCollection: React.FC = () => {
  const [formData, setFormData] = useState<ScrapingRequest>({
    rooms: '3-komnatnyie',
    city: 'hudzhand',
    build_state: 'sostoyanie---10',
    property_type: ''
  });

  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<ScrapingResponse | null>(null);
  const [error, setError] = useState<string | null>(null);

  const roomOptions = [
    { value: '1-komnatnyie', label: '1-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ' },
    { value: '2-komnatnyie', label: '2-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ' },
    { value: '3-komnatnyie', label: '3-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ' },
    { value: '4-komnatnyie', label: '4-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ' },
    { value: '5-komnatnyie', label: '5-–∫–æ–º–Ω–∞—Ç–Ω—ã–µ' }
  ];

  const cityOptions = [
    { value: 'hudzhand', label: '–•—É–¥–∂–∞–Ω–¥' },
    { value: 'dushanbe', label: '–î—É—à–∞–Ω–±–µ' },
    { value: 'kulob', label: '–ö—É–ª–æ–±' },
    { value: 'qurghonteppa', label: '–ö—É—Ä–≥–∞–Ω-–¢—é–±–µ' },
    { value: 'istiklol', label: '–ò—Å—Ç–∏–∫–ª–æ–ª' }
  ];

  const buildStateOptions = [
    { value: 'sostoyanie---10', label: '–ü–æ—Å—Ç—Ä–æ–µ–Ω–æ' },
    { value: 'sostoyanie---11', label: '–ù–∞ —Å—Ç–∞–¥–∏–∏ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞' }
  ];

  const propertyTypeOptions = [
    { value: '', label: '–í—Å–µ —Ç–∏–ø—ã' },
    { value: 'type---1', label: '–í—Ç–æ—Ä–∏—á–Ω—ã–π —Ä—ã–Ω–æ–∫' },
    { value: 'type---2', label: '–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏' }
  ];

  const getStepStatus = (step: string) => {
    if (!result) return 'pending';
    
    // Handle full pipeline response structure
    if (result.data && typeof result.data === 'object') {
      const pipelineData = result.data as any;
      
      switch (step) {
        case 'scraping':
          if (pipelineData.scraping) {
            return pipelineData.scraping.success ? 'completed' : 'error';
          }
          return isLoading ? 'active' : 'pending';
        
        case 'preprocessing':
          if (pipelineData.preprocessing) {
            return pipelineData.preprocessing.success ? 'completed' : 'error';
          }
          return pipelineData.scraping?.success ? 'active' : 'pending';
        
        case 'feature_engineering':
          if (pipelineData.feature_engineering) {
            return pipelineData.feature_engineering.success ? 'completed' : 'error';
          }
          return pipelineData.preprocessing?.success ? 'active' : 'pending';
        
        case 'database_import':
          if (pipelineData.database_import) {
            return pipelineData.database_import.success ? 'completed' : 'error';
          }
          return pipelineData.feature_engineering?.success ? 'active' : 'pending';
        
        default:
          return 'pending';
      }
    }
    
    // Fallback to original logic for backward compatibility
    switch (step) {
      case 'scraping':
        return result.processing_status === 'failed' ? 'error' : 
               result.processing_status === 'scraping_complete' || 
               result.processing_status === 'preprocessing_complete' ||
               result.processing_status === 'feature_engineering_complete' ||
               result.processing_status === 'complete' ? 'completed' : 'active';
      
      case 'preprocessing':
        return result.processing_status === 'failed' ? 'error' :
               result.processing_status === 'preprocessing_complete' ||
               result.processing_status === 'feature_engineering_complete' ||
               result.processing_status === 'complete' ? 'completed' :
               result.processing_status === 'scraping_complete' ? 'active' : 'pending';
      
      case 'feature_engineering':
        return result.processing_status === 'failed' ? 'error' :
               result.processing_status === 'complete' ? 'completed' :
               result.processing_status === 'feature_engineering_complete' ? 'completed' :
               result.processing_status === 'preprocessing_complete' ? 'active' : 'pending';
      
      default:
        return 'pending';
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    console.log('üîç DataCollection: Starting data collection with params:', formData);
    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const data: ScrapingResponse = await apiService.runFullPipeline(formData);
      console.log('‚úÖ DataCollection: Full pipeline response received:', data);
      setResult(data);
      
      if (data.status === 'failed') {
        setError(data.message);
      }
    } catch (err: any) {
      console.error('‚ùå DataCollection: Error during scraping:', err);
      setError(err.response?.data?.detail || err.message || 'Unknown error occurred');
    } finally {
      setIsLoading(false);
    }
  };

  const handleInputChange = (field: keyof ScrapingRequest, value: string) => {
    setFormData(prev => ({
      ...prev,
      [field]: value
    }));
  };

  return (
    <Container maxWidth="lg">
      <Box sx={{ my: 4 }}>
        <Typography variant="h4" component="h1" gutterBottom>
          –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
        </Typography>
        
        <Typography variant="body1" color="text.secondary" paragraph>
          –ù–∞—á–Ω–∏—Ç–µ —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –ø–æ–∏—Å–∫–∞, –∑–∞—Ç–µ–º —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏, 
          –æ–±—Ä–∞–±–æ—Ç–∞–µ—Ç –∏—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.
        </Typography>

        <Paper sx={{ p: 3, mb: 3 }}>
          <form onSubmit={handleSubmit}>
            <Typography variant="h6" gutterBottom>
              –ö—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞
            </Typography>
            
            <Box sx={{ display: 'grid', gap: 2, gridTemplateColumns: { xs: '1fr', md: '1fr 1fr' } }}>
              <FormControl fullWidth>
                <InputLabel>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç</InputLabel>
                <Select
                  value={formData.rooms}
                  label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç"
                  onChange={(e) => handleInputChange('rooms', e.target.value)}
                >
                  {roomOptions.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth>
                <InputLabel>–ì–æ—Ä–æ–¥</InputLabel>
                <Select
                  value={formData.city}
                  label="–ì–æ—Ä–æ–¥"
                  onChange={(e) => handleInputChange('city', e.target.value)}
                >
                  {cityOptions.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth>
                <InputLabel>–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞</InputLabel>
                <Select
                  value={formData.build_state}
                  label="–°–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞"
                  onChange={(e) => handleInputChange('build_state', e.target.value)}
                >
                  {buildStateOptions.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>

              <FormControl fullWidth>
                <InputLabel>–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏</InputLabel>
                <Select
                  value={formData.property_type || ''}
                  label="–¢–∏–ø –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏"
                  onChange={(e) => handleInputChange('property_type', e.target.value)}
                >
                  {propertyTypeOptions.map(option => (
                    <MenuItem key={option.value} value={option.value}>
                      {option.label}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
            </Box>

            <Box sx={{ mt: 3 }}>
              <Button
                type="submit"
                variant="contained"
                size="large"
                disabled={isLoading}
                startIcon={isLoading ? <CircularProgress size={20} /> : <SearchIcon />}
                fullWidth
              >
                {isLoading ? '–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö...' : '–ù–∞—á–∞—Ç—å —Å–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö'}
              </Button>
            </Box>
          </form>
        </Paper>

        {/* Progress Steps */}
        {(isLoading || result) && (
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –ü—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            </Typography>
            
            <Stepper orientation="vertical">
              <Step 
                active={getStepStatus('scraping') === 'active'} 
                completed={getStepStatus('scraping') === 'completed'}
              >
                <StepLabel 
                  error={getStepStatus('scraping') === 'error'}
                  icon={getStepStatus('scraping') === 'completed' ? <CheckCircleIcon /> : undefined}
                >
                  –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö —Å —Å–∞–π—Ç–∞
                </StepLabel>
              </Step>
              
              <Step 
                active={getStepStatus('preprocessing') === 'active'} 
                completed={getStepStatus('preprocessing') === 'completed'}
              >
                <StepLabel 
                  error={getStepStatus('preprocessing') === 'error'}
                  icon={getStepStatus('preprocessing') === 'completed' ? <CheckCircleIcon /> : undefined}
                >
                  –ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
                </StepLabel>
              </Step>
              
              <Step 
                active={getStepStatus('feature_engineering') === 'active'} 
                completed={getStepStatus('feature_engineering') === 'completed'}
              >
                <StepLabel 
                  error={getStepStatus('feature_engineering') === 'error'}
                  icon={getStepStatus('feature_engineering') === 'completed' ? <CheckCircleIcon /> : undefined}
                >
                  –ò–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤
                </StepLabel>
              </Step>
              
              <Step 
                active={getStepStatus('database_import') === 'active'} 
                completed={getStepStatus('database_import') === 'completed'}
              >
                <StepLabel 
                  error={getStepStatus('database_import') === 'error'}
                  icon={getStepStatus('database_import') === 'completed' ? <CheckCircleIcon /> : undefined}
                >
                  –ò–º–ø–æ—Ä—Ç –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
                </StepLabel>
              </Step>
            </Stepper>
            
            {isLoading && (
              <Box sx={{ mt: 2 }}>
                <LinearProgress />
              </Box>
            )}
          </Paper>
        )}

        {/* Results */}
        {result && (
          <Paper sx={{ p: 3, mb: 3 }}>
            <Typography variant="h6" gutterBottom>
              –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
            </Typography>
            
            {result.status === 'success' ? (
              <Alert severity="success" sx={{ mb: 2 }}>
                {result.message}
              </Alert>
            ) : (
              <Alert severity="error" sx={{ mb: 2 }}>
                {result.message}
              </Alert>
            )}

            {result.total_scraped !== undefined && result.total_scraped !== null && (
              <Box sx={{ mb: 2 }}>
                <Chip 
                  icon={<InfoIcon />}
                  label={`–°–æ–±—Ä–∞–Ω–æ –æ–±—ä–µ–∫—Ç–æ–≤: ${result.total_scraped}`}
                  color="primary"
                  variant="outlined"
                />
              </Box>
            )}

            {result.files_created && result.files_created.length > 0 && (
              <Accordion>
                <AccordionSummary expandIcon={<ExpandMoreIcon />}>
                  <Typography>–°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã ({result.files_created.length})</Typography>
                </AccordionSummary>
                <AccordionDetails>
                  <List dense>
                    {result.files_created?.map((file, index) => (
                      <ListItem key={index}>
                        <ListItemIcon>
                          <DownloadIcon />
                        </ListItemIcon>
                        <ListItemText 
                          primary={file}
                          secondary={`–§–∞–π–ª ${index + 1} –∏–∑ ${result.files_created?.length || 0}`}
                        />
                      </ListItem>
                    ))}
                  </List>
                </AccordionDetails>
              </Accordion>
            )}
          </Paper>
        )}

        {error && (
          <Alert severity="error" sx={{ mb: 3 }}>
            {error}
          </Alert>
        )}

        {/* Info Panel */}
        <Paper sx={{ p: 3 }}>
          <Typography variant="h6" gutterBottom>
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
          </Typography>
          
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>–ß—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö?</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography component="div" variant="body2">
                <ol>
                  <li><strong>–°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö</strong> - –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–±–µ—Ä–µ—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –æ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ —Å —Å–∞–π—Ç–∞ Somon.tj –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º</li>
                  <li><strong>–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞</strong> - –û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö, —É–¥–∞–ª–µ–Ω–∏–µ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤</li>
                  <li><strong>–ò–Ω–∂–µ–Ω–µ—Ä–∏—è –ø—Ä–∏–∑–Ω–∞–∫–æ–≤</strong> - –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –∏ –ø—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏—è</li>
                  <li><strong>–ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ –∞–Ω–∞–ª–∏–∑—É</strong> - –ü–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞</li>
                </ol>
              </Typography>
            </AccordionDetails>
          </Accordion>
          
          <Accordion>
            <AccordionSummary expandIcon={<ExpandMoreIcon />}>
              <Typography>–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±–∏—Ä–∞—é—Ç—Å—è?</Typography>
            </AccordionSummary>
            <AccordionDetails>
              <Typography variant="body2">
                ‚Ä¢ –¶–µ–Ω–∞ –∏ —Ü–µ–Ω–∞ –∑–∞ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã–π –º–µ—Ç—Ä<br/>
                ‚Ä¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç –∏ –æ–±—â–∞—è –ø–ª–æ—â–∞–¥—å<br/>
                ‚Ä¢ –≠—Ç–∞–∂ –∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç—Ç–∞–∂–µ–π<br/>
                ‚Ä¢ –†–∞–π–æ–Ω –∏ –∞–¥—Ä–µ—Å<br/>
                ‚Ä¢ –¢–∏–ø —Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–∞ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ<br/>
                ‚Ä¢ –§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ–±—ä–µ–∫—Ç–∞<br/>
                ‚Ä¢ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
              </Typography>
            </AccordionDetails>
          </Accordion>
        </Paper>
      </Box>
    </Container>
  );
};

export default DataCollection;
